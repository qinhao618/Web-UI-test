/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'idea'

    // Apply the application plugin to add support for building a CLI application
}
sourceCompatibility = 12

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    // Use JUnit test framework
    compile 'io.cucumber:cucumber-java:6.7.0'
    compile 'io.cucumber:cucumber-junit:6.7.0'
    compile group: 'io.cucumber', name: 'cucumber-jvm', version: '6.7.0', ext: 'pom'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '4.0.0-alpha-2'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-alpha-1'
    compile group: 'io.cucumber', name: 'cucumber-java8', version: '6.7.0'
    compile group: 'io.cucumber', name: 'cucumber-core', version: '6.7.0'
    compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.2.2'
    compile group: 'de.monochromata.cucumber', name: 'reporting-plugin', version: '4.0.84'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1'
    testImplementation 'io.cucumber:cucumber-java:6.7.0'
    testImplementation 'io.cucumber:cucumber-junit:6.7.0'

}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
        // extendsFrom testImplementation
    }
}

def cucumberOptions = [
        '-p', 'pretty',
        '-p', 'de.monochromata.cucumber.report.PrettyReports:target/cucumber',
        '-g', 'steps',
        '-g', 'gradle.cucumber',
        '/Users/yong.kou/Documents/Automation/cucumber-jvm-gradle-webdriver-master/src/test/resources',]

def cucumberTagExpression = []

def availableThreadCount = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
def cucumberThreadsOption = ['--threads', availableThreadCount]

def setParallel = "false"

task deleteScreenshotDir(type: Delete) {
    delete "screenshot"
}

task deleteCucumberReport(type: Delete) {
    delete "target/cucumber"
}
tasks.withType(JavaCompile) { 

    options.encoding = "UTF-8" 

}

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            systemProperty "cucumber.options", System.properties.getProperty("cucumber.options")
            systemProperty "parallel", System.properties.getProperty("parallel", setParallel)
            systemProperties(System.properties as Map<String, ?>)
            cucumberOptions.addAll(cucumberTagExpression)
            if (setParallel == "true") cucumberOptions.addAll(cucumberThreadsOption)
            args = cucumberOptions
        }
    }
}

task cucumber1() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

task runInParallel(){
    group = 'Cucumber Parallel'
    description = 'Runs build in parallel if used'
    dependsOn deleteScreenshotDir, deleteCucumberReport

    def tag = System.getProperty("tag")

    doLast {
        setParallel = "true"
        cucumberTagExpression = ['-t',tag]

    }
}

//gradle tasks
task runTestWithTag() {
    group = 'Cucumber TagExpressions'
    dependsOn deleteScreenshotDir, deleteCucumberReport

    //tag should be @tag or @tag, @tag1
    def tag = System.getProperty("tag")

    doLast {
        cucumberTagExpression = ['-t',tag]
    }
}
